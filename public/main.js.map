{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/components/editor/editor.component.css","webpack:///./src/app/components/editor/editor.component.html","webpack:///./src/app/components/editor/editor.component.ts","webpack:///./src/app/components/modify-problem/modify-problem.component.css","webpack:///./src/app/components/modify-problem/modify-problem.component.html","webpack:///./src/app/components/modify-problem/modify-problem.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/new-problem/new-problem.component.css","webpack:///./src/app/components/new-problem/new-problem.component.html","webpack:///./src/app/components/new-problem/new-problem.component.ts","webpack:///./src/app/components/problem-detail/problem-detail.component.css","webpack:///./src/app/components/problem-detail/problem-detail.component.html","webpack:///./src/app/components/problem-detail/problem-detail.component.ts","webpack:///./src/app/components/problem-list/problem-list.component.css","webpack:///./src/app/components/problem-list/problem-list.component.html","webpack:///./src/app/components/problem-list/problem-list.component.ts","webpack:///./src/app/models/problem.model.ts","webpack:///./src/app/pipes/search.pipe.ts","webpack:///./src/app/services/collaboration.service.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/app/services/input.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nimport { AppComponent } from './app.component';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\n\nimport { routing } from './app.routes';\nimport { NewProblemComponent } from './components/new-problem/new-problem.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { EditorComponent } from './components/editor/editor.component';\nimport { SearchPipe } from './pipes/search.pipe';\nimport { ModifyProblemComponent } from './components/modify-problem/modify-problem.component';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProblemListComponent,\n    ProblemDetailComponent,\n    NewProblemComponent,\n    NavbarComponent,\n    EditorComponent,\n    SearchPipe,\n    ModifyProblemComponent\n  ],\n  imports: [\n    BrowserModule,\n    routing,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Routes, RouterModule } from '@angular/router';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\n\n//routes: Routes(create routes, type is Routes)\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tredirectTo: 'problems',\n\t\tpathMatch: 'full'\n\t},\n\t{\n\t\tpath: 'problems',\n\t\tcomponent: ProblemListComponent\n\t},\n\t{\n\t\tpath: 'problems/:id',\n\t\tcomponent: ProblemDetailComponent\n\t},\n\t{\n\t\tpath: '**',\n\t\tredirectTo: 'problems'\n\t}\n];\n\nexport const routing = RouterModule.forRoot(routes);","module.exports = \"@media screen { \\n #editor { \\n   height: 600px; \\n } \\n\\n .lang-select { \\n   width: 100px; \\n   margin-right: 10px; \\n } \\n\\n header .btn { \\n   margin: 0 5px; \\n } \\n\\n footer .btn { \\n   margin: 0 5px; \\n } \\n\\n .editor-footer, .editor-header { \\n   margin: 10px 0; \\n } \\n\\n .cursor { \\n   /*position:absolute;*/ \\n   background: rgba(0, 250, 0, 0.5); \\n   z-index: 40; \\n   width: 2px!important \\n }\\n}\"","module.exports = \"<section>\\n  <header class=\\\"editor-header\\\">\\n    <div class=\\\"row\\\">\\n    \\t<!--choose language select -->\\n    \\t<!--ngmodel: bind to language -->\\n    \\t<!--setLanguage: if change language, change user code -->\\n      <select class=\\\"form-control pull-left lang-select\\\" name=\\\"language\\\"\\n        [(ngModel)]=\\\"language\\\" (change)=\\\"setLanguage(language)\\\">\\n      <option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">\\n        {{language}}\\n      </option>\\n      </select>\\n\\n\\n      <!--two way binding: () for event binding, [] for property binding-->\\n\\t  <!--We need to implement three functions: setLanguage(language), resetEditor(), and submit()-->\\n\\n      <!--reset button -->\\n      <!-- Button trigger modal -->\\n      <!--bind to myModal -->\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\">\\n        Reset\\n      </button>\\n\\n      <!-- Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"myModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n              <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Are you sure</h5>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\n              </button>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              You will lose current code in the editor, are you sure?\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Cancel</button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\"\\n              (click)=\\\"resetEditor()\\\">Reset</button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </header>\\n\\n  <div id=\\\"editor\\\">\\n  </div><!-- This is the body -->\\n  <!-- // counter for online user -->\\n  <div>\\n    {{output}}\\n  </div>\\n  <div>\\n    Number of Online Users: {{users}}\\n  </div>\\n  <!--submit button -->\\n  <footer class=\\\"editor-footer\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-success pull-right\\\" \\n      (click)=\\\"submit()\\\">Submit Solution</button>\\n  </footer>\\n</section>\"","import { Component, OnInit } from '@angular/core';\nimport { CollaborationService } from '../../services/collaboration.service'\nimport { Subscription } from 'rxjs';\nimport { DataService } from '../../services/data.service';\n// import router to get url, get what we are on which problem right now (for collaboration socket io)\nimport { ActivatedRoute, Params } from '@angular/router';\n\n//reference ace limiande variable\ndeclare var ace: any;\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n\teditor: any;\n\n\tsessionId: string;\n\n\t// for executor\n\toutput: string = '';\n\n\t// count online user: define users\n  \tusers: string = '';\n  \tsubscriptionUsers: Subscription;\n\n\t//setup language, and default language\n\tpublic languages: string[] = ['Java', 'Python', 'C++'];\n\tlanguage: string = 'Java';\n\n\t//user come in this page, default see\n  defaultContent = {\n    'Java': `public class Example {\n  public static void main(String[] args) {\n  // Type your Java code here\n  }\n  }`,\n  'Python': `class Solution:\n    def example():\n      # Write your Python code here`,\n  'C++': `int main()\n  {\n    return 0;\n  }`\n  };\n\n\tconstructor(private collaboration: CollaborationService,\n  \t\tprivate route: ActivatedRoute,\n    \tprivate dataService: DataService) { }\n\n  \t//chushihua\n  \tngOnInit() {\n\t\t// use problem id as session id\n\t\t// since we subscribe the changes, every time the params changes\n\t\t// sessionId will be updated and the editor will be initilized\n\t\tthis.route.params\n\t\t\t.subscribe(params => {\n\t\t\t\tthis.sessionId = params['id'];\n\t\t\t\tthis.initEditor();\n\t\t});\n\t\tthis.collaboration.restoreBuffer();\n  \t}\n\n  \tinitEditor(): void{\n\t\t // \"editor\" is the id in html\n\t\tthis.editor = ace.edit(\"editor\");\n\t\tthis.editor.setTheme(\"ace/theme/eclipse\");\n\t\t\n\t\t// when language changes, need to reset the editor\n\t\tthis.resetEditor();\n\t\t//get textarea's focus\n\t\tdocument.getElementsByTagName('textarea')[0].focus();\n\t\t//pass editor and sessid to collaboration\n\t\t//collaboration.init is in service/collaborationservice.ts\n  \t\tthis.collaboration.init(this.editor, this.sessionId)\n      \t\t.subscribe(users => this.users = users);\n\n\t\t// registrer change callback, if changes, refresh local screen\n\t\t// null = default is none changes\n\t\tthis.editor.lastAppliedChange = null;\n\t\t// if editor.on change\n\t\tthis.editor.on(\"change\", (e) => {\n\t\t\t// JSON.stringify xuliehua,serealization, change \"changes\" to string\n\t\t\tconsole.log('editor changes: ' + JSON.stringify(e));\n\t\t\t// check if the change is same as last change,\n\t\t\t// if they are the same, skip this change\n\t\t\tif (this.editor.lastAppliedChange != e) {\n\t\t\t\tthis.collaboration.change(JSON.stringify(e));\n\t\t\t}\n\t\t})\n  \t}\n\n  \t//reset editor\n  \tresetEditor(): void {\n  \t\tthis.editor.setValue(this.defaultContent[this.language]);\n  \t\tthis.editor.getSession().setMode(\"ace/mode/\" + this.language.toLowerCase());\n    }\n\n    setLanguage(language: string): void {\n\t  \tthis.language = language;\n\t  \tthis.resetEditor();\n    }\n\n    // first get user's code(from ace editor) .getValue is an api\n    // tmp write a log\n     submit(): void {\n\t  \tlet usercode = this.editor.getValue();\n\t  \tconsole.log(usercode);\n\n\t  \t// executor\n\t  \t// create object that contains user's code and language\n\t\t// send this to server\n\t  \tconst data = {\n      \t\tcode: usercode,\n      \t\tlang: this.language.toLowerCase()\n      \t}\n      \t// buildAndRun return a Promise\n      \tthis.dataService.buildAndRun(data).then(res => this.output = res);\n  \t}\n\n}\n","module.exports = \"\"","module.exports = \"<div>\\n  <form #formRef=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"problemDesc\\\">Problem Description</label>\\n      <textarea rows=\\\"20\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemDesc\\\" name=\\\"problemDesc\\\" placeholder=\\\"Input description\\\" required [(ngModel)]=\\\"problem.desc\\\"></textarea>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"difficulty\\\">Difficulty</label>\\n      <select class=\\\"form-control\\\" id=\\\"difficulty\\\" name=\\\"difficulty\\\" [(ngModel)]=\\\"problem.difficulty\\\">\\n        <option *ngFor=\\\"let difficulty of difficulties\\\" [value]=\\\"difficulty\\\">{{difficulty}}</option>\\n      </select>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\" (click)=\\\"modifyProblem()\\\">Modify</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\nimport { Input} from '@angular/core';\n\n@Component({\n  selector: 'app-modify-problem',\n  templateUrl: './modify-problem.component.html',\n  styleUrls: ['./modify-problem.component.css']\n})\nexport class ModifyProblemComponent implements OnInit {\n  @Input() problem: Problem;\n  difficulties = ['easy', 'medium', 'hard', 'super'];\n\n  constructor(private dataService: DataService) { }\n\n  ngOnInit() {\n  }\n\n  modifyProblem() {\n    this.dataService.modifyProblem(this.problem);\n    location.reload();\n  }\n}\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">{{title}}</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\">Link</a>\\n      </li>\\n      <li class=\\\"nav-item dropdown\\\">\\n        <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdown\\\" role=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n          Dropdown\\n        </a>\\n        <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdown\\\">\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Action</a>\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Another action</a>\\n          <div class=\\\"dropdown-divider\\\"></div>\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Something else here</a>\\n        </div>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link disabled\\\" href=\\\"#\\\">Disabled</a>\\n      </li>\\n    </ul>\\n    <form class=\\\"form-inline my-2 my-lg-0\\\">\\n      <input class=\\\"form-control mr-sm-2\\\" type=\\\"search\\\" placeholder=\\\"Search\\\" \\n              aria-label=\\\"Search\\\" [formControl]=\\\"searchBox\\\">\\n      <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n  </div>\\n</nav>\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { debounceTime } from 'rxjs/operators';\nimport { InputService } from '../../services/input.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\n\nexport class NavbarComponent implements OnInit, OnDestroy {\n\n\ttitle = 'OJ CLIENT'\n\n\tsearchBox: FormControl = new FormControl();\n\tsubscription: Subscription;\n\n  \tconstructor(private input: InputService, private router: Router) { }\n\n  \tngOnInit() {\n  \t\tthis.subscription = this.searchBox\n  \t\t\t\t\t\t.valueChanges\n  \t\t\t\t\t\t.subscribe(\n  \t\t\t\t\t\t\tterm => {\n  \t\t\t\t\t\t\t\tthis.input.changeInput(term);\n  \t\t\t\t\t\t\t});\n  \t}\n\n  \tngOnDestroy() {\n  \t\tthis.subscription.unsubscribe();\n  \t}\n\n  \tsearchProblem(): void {\n  \t\tthis.router.navigate(['/problems']);\n  \t}\n}","module.exports = \"\"","module.exports = \"<div>\\n    <form #formRef = \\\"ngForm\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"problemName\\\">Problem name</label>\\n        <input name = \\\"problemName\\\" id=\\\"problemName\\\" class=\\\"form-control\\\"\\n          type=\\\"text\\\" required placeholder=\\\"Please enter problem name\\\" \\n          [(ngModel)] = \\\"newProblem.name\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"problemDesc\\\">problem description</label>\\n        <textarea name = \\\"problemDesc\\\" id=\\\"problemDesc\\\" class=\\\"form-control\\\"\\n         placeholder=\\\"Please enter problem description\\\" \\n          [(ngModel)] = \\\"newProblem.desc\\\" rows=\\\"3\\\">\\n        </textarea>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n         <label for=\\\"problemDifficulty\\\">Difficulty</label> \\n         <select class=\\\"form-control\\\" id=\\\"difficulty\\\" name=\\\"difficulty\\\"\\n         [(ngModel)] = \\\"newProblem.difficulty\\\">\\n          <option *ngFor = \\\"let difficulty of difficulties\\\" [value] = \\\"difficulty\\\">\\n            {{difficulty}}\\n          </option>\\n         </select>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class = \\\"col-md-12\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary pull-right\\\"\\n            (click) = \\\"addProblem()\\\"\\n          > Add problem </button>\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n<br/>\\n<br/>\"","import { Component, OnInit } from '@angular/core';\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\n\n//default\nconst DEFAULT_PROBLEM: Problem = Object.freeze({\n\tid: 0,\n\tname: '',\n\tdesc: '',\n\tdifficulty: 'easy'\n});\n\n@Component({\n  selector: 'app-new-problem',\n  templateUrl: './new-problem.component.html',\n  styleUrls: ['./new-problem.component.css']\n})\n\nexport class NewProblemComponent implements OnInit {\n\tnewProblem: Problem = Object.assign({}, DEFAULT_PROBLEM);\n\tdifficulties: string[] = ['easy', 'medium', 'hard', 'super'];\n\n\n\tconstructor(private dataService: DataService) { }\n\n\tngOnInit() {\n\t}\n\n\taddProblem() {\n\t\tthis.dataService.addProblem(this.newProblem);\n\t\t//DEFAULT_PROBLEM clone to newProblem variable\n\t\tthis.newProblem = Object.assign({}, DEFAULT_PROBLEM);\n\t}\n\n}","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"problem\\\">\\n\\t<div class=\\\"row\\\">\\n\\n\\t\\t<div class=\\\"col-sm-12 col-md-4\\\">\\n\\t\\t\\t<div>\\n\\t\\t\\t\\t<h2>\\n\\t\\t\\t\\t\\t{{problem.id}}. {{problem.name}}\\n\\t\\t\\t\\t</h2>\\n      \\t\\t\\t<p *ngIf=\\\"!modifyMode\\\">{{problem.desc}}</p>\\n      \\t\\t\\t<app-modify-problem *ngIf=\\\"modifyMode\\\" [problem]=\\\"problem\\\"></app-modify-problem>\\n      \\t\\t\\t<p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"edit()\\\">{{modifyMode ? 'Cancel' : 'Edit'}}</button></p>\\n\\n\\t\\t\\t\\t<app-count></app-count>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"hidden-xs col-sm-12 col-md-8\\\">\\n\\t\\t\\t<app-editor></app-editor>\\t\\n\\t\\t</div>\\n\\t\\t\\n\\t</div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router'; //rightnow path lujing canshu\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\n\n@Component({\n\tselector: 'app-problem-detail',\n\ttemplateUrl: './problem-detail.component.html',\n\tstyleUrls: ['./problem-detail.component.css']\n})\n\nexport class ProblemDetailComponent implements OnInit {\n  problem: Problem;\n\n  //modify problem\n  modifyMode = false;\n\n  //injection done in constructor. \n  //first declare privat date service, then declare route\n  constructor(private dataService: DataService,\n  \tprivate route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      //this.problem = this.dataService.getProblem(+params['id']);\n      this.dataService.getProblem(+params['id'])\n        .then(problem => this.problem = problem);\n    });\n  }\n\n  //modify problem\n  edit() {\n    this.modifyMode = !this.modifyMode;\n  }\n}","module.exports = \".difficult {\\n\\tmin-width: 65px;\\n\\tmargin-right: 18px;\\n}\\n\\n.badge.difficulty {\\n\\tpadding-top: 0.6em;\\n\\tcolor: #fbfdfa;\\n\\tfont-size: 12px;\\n}\\n\\n.title {\\n\\tfont-size: 1.2em;\\n}\\n\\n.diff-easy {\\n\\tbackground-color: #42ebf4;\\n}\\n\\n.diff-medium {\\n\\tbackground-color: #92cf5c;\\n}\\n\\n.diff-hard {\\n    background-color: #dd0d1e;\\n}\\n\\n.diff-super{\\n\\tbackground-color: #8d16e2;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n\\t<app-new-problem></app-new-problem>\\n\\n\\t<div class=\\\"list-group\\\">\\n\\t\\t<!--ngfor either search or searchterm, two variable is from search.pipe.ts transform()-->\\n\\t\\t<a class=\\\"list-group-item\\\" *ngFor=\\\"let problem of (problems | search: searchTerm)\\\"\\n\\t\\t[routerLink]=\\\"['/problems', problem.id]\\\">\\n\\t\\t<span class=\\\"{{'pull-left badge difficulty diff-' +\\n\\t\\t\\tproblem.difficulty.toLocaleLowerCase()}}\\\">\\n\\t\\t\\t{{problem.difficulty}}\\n\\t\\t</span>\\n\\t\\t<strong class=\\\"title\\\">{{problem.id}}. {{problem.name}}</strong>\\n\\t\\t</a>\\n\\t</div>\\n\\n</div>\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n//unsubscribe when destroy to avoid memory leak\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\n\nimport { InputService } from '../../services/input.service';\n\n@Component({\n  selector: 'app-problem-list',\n  templateUrl: './problem-list.component.html',\n  styleUrls: ['./problem-list.component.css']\n})\nexport class ProblemListComponent implements OnInit, OnDestroy {\n\t\n\tproblems: Problem[];\n  \tsubscriptionProblems: Subscription;\n\n\tsearchTerm: string = '';\n  \tsubscriptionInput: Subscription;\n\n  \tconstructor(private dataService: DataService, private inputService: InputService) { }\n\n\tngOnInit() {\n\t\tthis.getProblems();\n\t\tthis.getSearchTerm();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.subscriptionProblems.unsubscribe();\n\t}\n\n\tgetProblems() {\n\t\t//this.problems = this.dataService.getProblems();\n\t\tthis.subscriptionProblems = this.dataService.getProblems()\n\t\t  .subscribe(problems => this.problems = problems);\n\t}\n\n\tgetSearchTerm() {\n    \tthis.subscriptionInput = this.inputService.getInput()\n                              \t.subscribe(\n                              \t\tinputTerm => this.searchTerm = inputTerm);\n  \t}\n\n}","export class Problem {\n\tid: number;\n\tname: string;\n\tdesc: string;\n\tdifficulty: string;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Problem } from '../models/problem.model';\n\n// pipe is use for filter problems\n@Pipe({\n  name: 'search'\n})\nexport class SearchPipe implements PipeTransform {\n  // based on problems tiku, and search term, return problem array\n  transform(problems: Problem[], term: string): Problem[] {\n  \tconsole.log(problems);\n  \tconsole.log(term);\n  \treturn problems.filter(\n  \t\tproblem => problem.name.toLowerCase().includes(term.toLowerCase()));\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n//reference socket io\n// io is alread imported in .angular.cli.json\ndeclare var io: any; \n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CollaborationService {\n\t// any: not specify type kid\n\tcollaborationSocket: any;\n\tprivate _userSource = new Subject<string>();\n\n  \tconstructor() { }\n\n  \tinit(editor: any, sessionId: string): Observable<string> {\n  \t\t//window.location.origin means the server location on the current page\n  \t\t// for example, the current page on the browser is \"localhost:3000/problems/1\", the window.location.origin = \"http/localhost:3000\"\n  \t\t//query: send handshake message\n\t\tthis.collaborationSocket = io(window.location.origin, {query: 'sessionId=' + sessionId});\n\n\t\t// on: on message, wait for server's message\n\t  \t// wait for 'message' event\n\t\t// when receive the message, for now just print the socket connection message\n\n\t\t// delta means changees. \n\t\t// \"change\" is sent from server\n\t\tthis.collaborationSocket.on(\"change\", (delta: string) => {\n\t\t\tconsole.log('collabration: editor changes by ' + delta);\n\t\t\t// put delta deseralize to object\n\t\t\tdelta = JSON.parse(delta); // delta is json format\n\t\t\t// if server changes, tell local, so local changes, this local changes doesn't need to tell server again\n\t\t\teditor.lastAppliedChange = delta;\n\t\t\t// apply the changes on editor\n\t\t\teditor.getSession().getDocument().applyDeltas([delta]);\n\t\t});\n\n\t\t// for count online user\n\t\t// when \"userchange\" happens, do (data: function)\n\t\tthis.collaborationSocket.on(\"userChange\", (data: string[]) => {\n\t\t\tconsole.log('collaboration user change: ' + data);\n\t\t\t//.next means next data\n\t\t\tthis._userSource.next(data.toString());\n    \t});\n\n    \treturn this._userSource.asObservable();\n  \t}\n\n  \t// emit event to make changes and inform server and other collaborators\n\tchange(delta: string): void {\n\t\t// emit \"change\" event\n\t\tthis.collaborationSocket.emit(\"change\", delta);\n\t}\n\trestoreBuffer(): void {\n    \tthis.collaborationSocket.emit(\"restoreBuffer\");\n  \t}\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Problem } from \"../models/problem.model\";\n\nconst options = { headers: new HttpHeaders({ 'Content-Type': 'application/json'})};\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DataService {\n  private _problemSource = new BehaviorSubject<Problem[]>([]);\n  constructor(private httpClient: HttpClient) { }\n\n  // getProblems(): Problem[] {\n  // \treturn this.problems;\n  // }\n  // getProblem(id: number): Problem {\n  // \treturn this.problems.find( (problem) => problem.id === id );\n  // }\n  // addProblem(problem: Problem) {\n  // \tproblem.id = this.problems.length + 1;\n  // \tthis.problems.push(problem);\n  // }\n  getProblems(): Observable<Problem[]> {\n    this.httpClient.get('api/v1/problems')\n      .toPromise()\n      .then((res: any) => {\n        this._problemSource.next(res);\n      })\n      .catch(this.handleError);\n\n      return this._problemSource.asObservable();\n  }\n\n  getProblem(id: number): Promise<Problem> {\n    return this.httpClient.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res: any) => res)\n      .catch(this.handleError);\n  }\n\n  addProblem(problem: Problem) {\n    return this.httpClient.post('api/v1/problems', problem, options)\n      .toPromise()\n      .then((res: any) => {\n        this.getProblems();\n\n        return res;\n      })\n      .catch(this.handleError);\n  }\n\n  modifyProblem(problem: Problem) {\n    return this.httpClient.put(`/api/v1/problems/${problem.id}`, problem, options)\n      .toPromise()\n      .then((res: any) => {\n        this.getProblems();\n        return res;\n      })\n      .catch(this.handleError);\n  }\n\n  buildAndRun(data): Promise<any> {\n    // define the Content-Type in http request header\n    // Content-Type declears the body type when you issue a POST request\n    const options = { headers: new HttpHeaders({'Content-Type': \"application/json\"})};\n\n    return this.httpClient.post('api/v1/build_and_run', data, options)\n      .toPromise() // convert observable to promise\n      .then(res => {\n        console.log(res);\n        return res;\n      })\n      .catch(this.handleError);\n  }\n\n\n  private handleError(error: any): Promise<any> {\n    return Promise.reject(error.body || error);\n  }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n// input service is used for get input\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class InputService {\n  // $ means string\n  private inputSubject$ = new BehaviorSubject<string>('');\n  constructor() { }\n\n  //when search term come in, anybody who subscribe ths input subject will get the search term\n  changeInput(term) {\n  \tconsole.log(term);\n  \tthis.inputSubject$.next(term);\n  }\n\n  // let subscriber get private bianliang inputSubject from outside\n  getInput(): Observable<string> {\n  \treturn this.inputSubject$.asObservable();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}